{"version":3,"sources":["components/Navbar.js","components/Information.js","components/Toggle.js","utils/globals.js","utils/hooks.js","components/TopRow.js","components/PostCard.js","components/Account.js","components/GraphiqlButton.js","utils/authCheck.js","App.js","index.js"],"names":["Navbar","useState","loading","setLoading","useEffect","setTimeout","className","Information","Toggle","toggleToAccount","accountToggleHandler","onClick","LoadingLineComponent","TopRow","useContext","AppContext","userID","state","loggedIn","totalposts","initialLoading","LoadPostsData","initialLoadingHandler","radioAllHandler","postForm","setPostForm","showToolTip","setShowToolTip","radioAll","setRadioAll","postFormHandler","e","value","preventDefault","radioHandler","target","type","name","id","checked","onChange","htmlFor","PostForm","postFormInitialValues","title","description","file","titlePlaceholder","descriptionPlaceholder","loadPostCounts","addPostHandler","formRef","React","useRef","initialValues","token","values","setValues","errors","setErrors","postData","setPostData","validationCheck","a","errorObj","toString","trim","length","titleError","characterCount","descriptionError","split","forEach","word","wordLength","exec","includes","fileError","errorMessage","Object","keys","formData","FormData","append","fileType","join","getUrlMutation","fetch","method","headers","body","JSON","stringify","query","getUrlResponse","ok","json","data","signUrl","hasOwnProperty","__typename","signedUrlS3","fileName","fileUrl","Error","postPostMutation","postPostMutationRequest","responseData","postPost","changeHandler","files","submitHandler","usePostForm","outsideClickHandler","current","contains","window","addEventListener","removeEventListener","ref","placeholder","PostCard","twoRow","setTwoRow","postsData","postsLoading","deletePostHandler","checkScreenWidth","width","innerWidth","map","neglectNumber","LoaderList","key","post","PostList","_id","index","imageURL","createdBy","deleteErrorMessage","setDeleteErrorMessage","postDeleted","setPostDeleted","deleteLoading","setDeleteLoading","deletedPostId","setDeletedPostId","DELETEMUTATION","deleteRequest","deletePost","deletePostMethod","useDeletePost","updatingDescriptionHandler","updateErrorMessage","setUpdateErrorMessage","postUpdated","setPostUpdated","updateLoading","setUpdateLoading","currentDescription","console","log","UPDATEMUTATION","updateRequest","updatePost","updatePostMethod","useUpdatePost","showUpdateFields","setShowUpdateFields","valuesToUpdate","setValuesToUpdate","updateTitle","updateDescription","Picture","Description","updateChangeHandler","newObj","PostButtons","updateClickHandler","action","replace","charAt","toUpperCase","imageLoaded","setImageLoaded","style","display","src","onLoad","initialLoginValues","email","password","emailPlaceholder","passwordPlaceholder","initialRegisterValues","username","usernamePlaceholder","Account","logoutHandler","register","setRegister","LoginForm","RegisterForm","loginHandler","setLoggedIn","setToken","signInUserMutation","loginResponse","signInUser","document","cookie","refreshToken","accessToken","prevValues","useLogin","onSubmit","registered","setRegistered","signUpUserMutation","registerResponse","signUpUser","registerHandler","useRegister","GraphiqlButton","graphiqlLink","open","checkUserStatus","getCookie","decode","userType","tokenType","exp","expiredToken","expired","delete_cookie","cname","ca","decodeURIComponent","i","c","substring","indexOf","Date","getTime","createContext","appReducer","payload","App","useReducer","dispatch","firstLoaded","setFirstLoaded","toggleAuth","setToggleAuth","loadAuthStatus","userIDParam","parameters","limit","skip","asc","POSTS_QUERY","COUNT_QUERY","getPosts","variables","getCounts","Promise","all","getPostsResponse","getCountsResponse","getPostsResponseData","getCountsResponseData","posts","totalPosts","count","oopsError","booleanValue","radioAllBooleanValue","timerID","setInterval","clearInterval","Provider","filteredPosts","filter","newPostsData","updatedDescription","postsDataCopy","postIndex","findIndex","item","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2cef04b6.chunk.js","sourcesContent":["import React, {useState, useEffect} from \"react\";\r\n\r\n\r\nfunction Navbar(){\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setLoading(false)\r\n        }, 1000)\r\n    }, [])\r\n\r\n    if(loading){\r\n        return(\r\n            <div className = \"NavBar\">\r\n                <div className = \"LogoText LogoTextLoading\">\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    return(\r\n        <div className = \"NavBar\">\r\n            <div className = \"LogoText\">\r\n                <h1>\r\n                    <span className = \"LogoFirstHalf\">Demo</span>\r\n                    <span className = \"LogoSecondHalf\">Card</span>\r\n                </h1>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar;\r\n","import React, {useState, useEffect} from \"react\";\r\n\r\nexport default function Information(){\r\n    const [loading, setLoading] = useState(true)\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setLoading(false)\r\n        }, 2000)\r\n    }, [])\r\n\r\n    if(loading){\r\n        return(\r\n            <div className = \"Loader_Information\">\r\n                <div className = \"LI_Header\"></div>\r\n                <div className = \"LI_Para\"></div>\r\n                <div className = \"LI_Header\"></div>\r\n                <div className = \"LI_Para\"></div>\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <div className = \"Information\">\r\n            <h1>About this little project</h1>\r\n            <p>This is a demo app created by me for the purpose of learning Basics of <strong>GraphQl</strong></p>\r\n            <h1 className = \"I_h1_2\">Technology Used</h1>\r\n            <p>React(hooks), <strong>GraphQl(Apollo)</strong>, Nodejs, MongoDB</p>\r\n        </div>\r\n    )\r\n}","import React, {useState, useEffect} from \"react\";\r\n\r\n\r\nexport default function Toggle({toggleToAccount,accountToggleHandler}){\r\n    const [loading, setLoading] = useState(true)\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setLoading(false)\r\n        }, 2500)\r\n    }, [])\r\n\r\n    if(loading){\r\n        return(\r\n            <div className =\"Loader_Toggle\">\r\n                <div></div>\r\n                <div></div>\r\n            </div>\r\n        )\r\n    }\r\n    return(\r\n        <div className =\"Toggle\">\r\n            <button \r\n                className = {!toggleToAccount ? \"Toggle_Button ToggleActiveButton\":\"Toggle_Button\"} \r\n                onClick = {() => {\r\n                    if(!toggleToAccount){\r\n                        return null\r\n                    }\r\n                    accountToggleHandler(false)\r\n                    \r\n                }}\r\n            >\r\n                Posts\r\n            </button>\r\n            <button \r\n                className = {!toggleToAccount ? \"Toggle_Button\":\"Toggle_Button ToggleActiveButton\"}\r\n                onClick = {() => {  \r\n                    if(toggleToAccount){\r\n                        return null\r\n                    }    \r\n                    accountToggleHandler(true)  \r\n                }}\r\n            >    \r\n               Account\r\n            </button>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\n\r\n\r\n//export const  SERVERURI = \"http://localhost:5000/graphql\";\r\nexport const  SERVERURI = \"/graphql\";\r\n\r\nexport function LoadingLineComponent(){\r\n    return  <>\r\n                <div className= \"loadingLineComponent\">\r\n                        <div className = \"loadingLineComponentOuter\">\r\n                            <div className = \"loadingLineComponentInner\">\r\n                            </div>\r\n                        </div>\r\n                </div>\r\n            </>\r\n}\r\n","import React, {useState, useEffect, useContext} from \"react\";\r\nimport {AppContext} from \"../App\"\r\nimport {SERVERURI} from \"./globals\";\r\n\r\nexport const useLogin = (initialValues) => {\r\n    const [values, setValues] = useState(initialValues);\r\n    const [errors, setErrors] = useState({})\r\n    const [loggedIn, setLoggedIn] = useState(false);\r\n    const [token, setToken] = useState(null);\r\n    const [loading, setLoading]= useState(false);\r\n\r\n    function changeHandler(e){\r\n        e.preventDefault();\r\n        const name = e.target.name;\r\n        const value = e.target.value;   \r\n        setValues(prevValues => ({...prevValues, [name]: value}))\r\n    }\r\n\r\n    function validationCheck(){\r\n        // serverSideValidation\r\n    }\r\n\r\n    async function submitHandler(e, values){\r\n            setLoading(true)\r\n            e.preventDefault()\r\n            // clearing out the initial Errors\r\n            setErrors({})\r\n            const signInUserMutation = `mutation {\r\n                             signInUser(email: \"${values.email}\", password: \"${values.password}\") \r\n                                {   \r\n                                    __typename\r\n                                    ... on Error{\r\n                                    errorMessage\r\n                                  }\r\n                                  \r\n                                  ... on accessResponse{\r\n                                    refreshToken\r\n                                    accessToken\r\n                                  }\r\n                                }\r\n                            }`\r\n            try{\r\n                const loginResponse = await fetch(SERVERURI,{\r\n                    method: \"POST\", \r\n                    headers: {\r\n                        'Content-Type': `application/json`,\r\n                        'Accept'      : `application/json`\r\n                    },\r\n                    body: JSON.stringify({query: signInUserMutation})\r\n                })\r\n\r\n                // no response\r\n                if(!loginResponse.ok){\r\n                    let errorObj = {};\r\n                    errorObj.errorMessage = \"Something went wrong\"\r\n                    throw(errorObj)\r\n                }\r\n\r\n                const {data} = await loginResponse.json()\r\n                \r\n                // no data so errors \r\n                if(!data){\r\n                    throw({errorMessage: \"Something went wrong\"})\r\n                }\r\n    \r\n                // checking for __typeName for errors\r\n                // checking for __typeName and error\r\n                if(data.signInUser[0].__typename === \"Error\"){\r\n                    throw(data.signInUser[0])\r\n                }\r\n\r\n                // setting cookies    \r\n                document.cookie = \"refreshToken\" + \"=\" +data.signInUser[0].refreshToken           \r\n                document.cookie = \"accessToken\" + \"=\" +data.signInUser[0].accessToken\r\n\r\n                // set logged In true\r\n                setLoading(false)\r\n                setLoggedIn(true)\r\n                setToken(data.signInUser[0].accessToken)                \r\n            }\r\n            catch(error){\r\n                // no response or if graphql default errorObj\r\n                if(error && error.hasOwnProperty(\"errorMessage\")){\r\n                    setErrors(error)\r\n                }else {\r\n                    setErrors({errorMessage: \"something went wrong try again later\"})\r\n                }\r\n                setLoading(false)\r\n                // erros defined by me at backend--TODO\r\n            }\r\n    }\r\n\r\n    // returning all the values and ...rest variables\r\n    return {values, changeHandler, submitHandler, errors, loggedIn, token, loading}\r\n}\r\n\r\n\r\nexport const useRegister = (initialValues) => {\r\n    const [values, setValues] = useState(initialValues);\r\n    const [errors, setErrors] = useState({})\r\n    const [registered, setRegistered] = useState(null);\r\n    const [loading, setLoading] = useState(null)\r\n\r\n\r\n    function changeHandler(e){\r\n        e.preventDefault();\r\n        const name = e.target.name;\r\n        const value = e.target.value;   \r\n        setValues(prevValues => ({...prevValues, [name]: value}))\r\n    }\r\n\r\n\r\n    async function registerHandler(e, values){\r\n        setLoading(true)\r\n        e.preventDefault()\r\n        // clearing out the initial Errors\r\n        setErrors({})\r\n        const signUpUserMutation = `mutation {\r\n                        signUpUser(email:\"${values.email}\", username:\"${values.username}\", password: \"${values.password}\"){\r\n                            __typename\r\n                            ... on Error{\r\n                            errorMessage\r\n                            }\r\n                            ... on trueORfalse{\r\n                            ok\r\n                            }\r\n                        }                \r\n                    }`\r\n        try{\r\n            const registerResponse = await fetch(SERVERURI,{\r\n                method: \"POST\", \r\n                headers: {\r\n                    'Content-Type': `application/json`,\r\n                    'Accept'      : `application/json`\r\n                },\r\n                body: JSON.stringify({query: signUpUserMutation})\r\n            })\r\n\r\n            // no response\r\n            if(!registerResponse.ok){\r\n                let errorObj = {};\r\n                errorObj.errorMessage = \"Something went wrong\"\r\n                throw(errorObj)\r\n            }\r\n\r\n            const {data} = await registerResponse.json()\r\n            \r\n            // no data so errors \r\n            if(!data){\r\n                throw({errorMessage: \"Something went wrong\"})\r\n            }\r\n\r\n            // checking for __typeName for errors\r\n            // checking for __typeName and error\r\n            if(data.signUpUser.__typename === \"Error\"){\r\n                throw({errorMessage: data.signUpUser.errorMessage})\r\n            }\r\n\r\n            if(data.signUpUser.ok)\r\n            {\r\n                setRegistered(true)\r\n                setLoading(false)\r\n            }\r\n\r\n            // setting registeresd to true and redirecting to login\r\n        }\r\n        catch(error){\r\n            // no response or if graphql default errorObj\r\n            if(error && error.hasOwnProperty(\"errorMessage\")){\r\n                setErrors(error)\r\n            }else {\r\n                setErrors({errorMessage: \"something went wrong try again later\"})\r\n            }\r\n            // erros defined by me at backend--TODO\r\n            setLoading(false)\r\n        }\r\n    }\r\n\r\n    return {values, changeHandler, errors, registerHandler, registered, loading}\r\n}\r\n\r\nexport const usePostForm = (initialValues) => {\r\n    const {state:{token}} = useContext(AppContext)\r\n    const [values, setValues] = useState(initialValues);\r\n    const [errors, setErrors] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n    const [postData,setPostData] = useState(null)\r\n    function changeHandler(e){\r\n        e.preventDefault();\r\n        const {name, value} = e.target;\r\n        // for file\r\n        if(name === \"file\"){\r\n            setValues({...values, [name]: e.target.files[0]})\r\n            return \r\n        }\r\n\r\n        // for values\r\n        setValues({...values, [name]: value})\r\n    }\r\n\r\n    async function validationCheck(values){\r\n        // clearing out previous erros---/ just in case\r\n        setErrors(null)\r\n        try{    \r\n            const {title, description, file} = values;\r\n            // checking for empty values\r\n            let errorObj = {}\r\n            if(title.toString().trim().length === 0){\r\n                errorObj.titleError = \"title cannot be empty\"\r\n            }else if(title.toString().trim().length <= 2){\r\n                errorObj.titleError = \"title must le at least 3 characters long\"\r\n            }\r\n\r\n            let characterCount = 0;\r\n            if(description.toString().trim().length === 0){\r\n                errorObj.descriptionError = \"description cannot be empty\"\r\n            }\r\n\r\n\r\n            // not empty\r\n            description.toString().trim().split(\" \").forEach((word) => {\r\n                const wordLength = word.length\r\n                characterCount+=wordLength\r\n            })\r\n            if(characterCount > 300){\r\n                errorObj.descriptionError = \"Max limit is 300 characters\"\r\n            }\r\n            if(characterCount < 50){\r\n                errorObj.descriptionError = \"Min limit is 50 characters\"\r\n            }\r\n            let match = /\\r|\\n/.exec(description);\r\n            if (match) {\r\n                errorObj.descriptionError = \"No line breaks allowed\"\r\n            }\r\n            // check for file\r\n            if(!file){\r\n                errorObj.fileError = \"Select a file\"\r\n            }else if(file){\r\n                // file type\r\n                const allowedFileTypes = ['image/png', 'image/jpeg', 'image/gif']\r\n                if(!allowedFileTypes.includes(file.type)){\r\n                    errorObj.fileError = \"Only image files are allowed\"\r\n                }\r\n            }\r\n            return errorObj\r\n        }catch(error){\r\n            let errorObj = {}\r\n            errorObj.errorMessage = \"Something went wrong\"\r\n            return errorObj;\r\n        }\r\n    }\r\n\r\n    async function submitHandler(values){\r\n        // settng postData to null\r\n        setPostData(null)\r\n        setLoading(true)\r\n        // clearing out previous erros---/ just in case\r\n        try{\r\n            const errors = await validationCheck(values)\r\n            if(Object.keys(errors).length > 0){\r\n                // we have errors \r\n                setErrors(errors)\r\n                setLoading(false)\r\n                return\r\n            }\r\n            // no Errors\r\n\r\n            var formData = new FormData();\r\n            Object.keys(values).forEach(value => {\r\n                formData.append(value, values[value])\r\n            })\r\n        \r\n            const fileType = values.file.type.split(\"/\").join(\".\")\r\n\r\n            // getting signedURL\r\n            const getUrlMutation = `mutation{\r\n                signUrl(fileType:\"${fileType}\"){       \r\n                  ... on signedUrl{\r\n                    __typename\r\n                    signedUrlS3\r\n                    fileName\r\n                    fileUrl\r\n                  }\r\n                }\r\n              }\r\n            `\r\n\r\n            const getUrlResponse = await fetch(SERVERURI,{\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"authorization\": `Bearer ${token}`,\r\n                    \"content-type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify({\r\n                    query: getUrlMutation\r\n                })\r\n            })\r\n\r\n            \r\n            if(!getUrlResponse.ok){\r\n                let errorObj = {};\r\n                errorObj.errorMessage = \"Something went wrong\"\r\n                throw(errorObj)\r\n            }\r\n\r\n            const {data} = await getUrlResponse.json();\r\n            if(!data){\r\n                throw({errorMessage: \"something went wrong\"})\r\n            }\r\n\r\n            if(data.signUrl && !data.signUrl.hasOwnProperty(\"__typename\") && !data.signUrl.__typename === \"singedUrl\"){\r\n                throw ({errorMessage: \"something went wrong\"})\r\n            }\r\n            const {signedUrlS3, fileName, fileUrl} = data.signUrl;\r\n            // uploading to S3 with signed key\r\n            const filetoS3Response = await fetch(signedUrlS3, {\r\n                method: \"PUT\", \r\n                headers: {\r\n                    'Content-Type': fileType,\r\n                    'x-amz-acl': 'public-read' \r\n                },\r\n                body: values.file\r\n            })\r\n\r\n            if(!filetoS3Response.ok){\r\n                throw new Error(\"something went wrong\")\r\n            }\r\n        \r\n            // upload file to aws with signedURL and getback file url\r\n           // const fileName = // getUUIdFrom after signed;;;\r\n\r\n\r\n            const postPostMutation = `mutation {\r\n                postPost(title: \"${values.title.toString()}\", description:\"${values.description.toString()}\", imageURL:\"${fileUrl.toString()}\"){\r\n                  ... on Error{\r\n                    errorMessage\r\n                  }\r\n                  \r\n                  ... on Post{\r\n                    __typename\r\n                    _id\r\n                    description\r\n                    title\r\n                    imageURL\r\n                    createdBy{\r\n                        _id\r\n                        name\r\n                    }\r\n                  }\r\n                }\r\n              }`\r\n\r\n            const postPostMutationRequest = await fetch(SERVERURI, {\r\n                                    method: 'POST',\r\n                                    headers: {\r\n                                        \"authorization\": `Bearer ${token}`,\r\n                                        \"content-type\": \"application/json\"\r\n                                    },\r\n                                    body: JSON.stringify({query: postPostMutation})\r\n                                })\r\n                                \r\n            if(!postPostMutationRequest.ok){\r\n                throw new Error(\"some error\")\r\n            }\r\n            const {data:{postPost: responseData}} = await postPostMutationRequest.json();\r\n            if(!responseData){\r\n                // we get graphql error defined by us so :)))))\r\n                throw new Error(\"something surely went wrong\")\r\n            }\r\n\r\n            //else setting\r\n            delete responseData.__typename;\r\n            setPostData(responseData)\r\n            setLoading(false)\r\n           \r\n        }catch(error){\r\n            if(error && error.hasOwnProperty(\"errorMessage\")){\r\n                setErrors(error)\r\n            }else {\r\n                setErrors({errorMessage: \"something went wrong try again later\"})\r\n            }\r\n            setPostData(null)\r\n            setLoading(false);\r\n        }\r\n    }\r\n    return {values, changeHandler, submitHandler, errors, loading, postData}\r\n}\r\n\r\nexport const useDeletePost = () => {\r\n    const {state:{token}} = useContext(AppContext)\r\n    const [deleteErrorMessage, setDeleteErrorMessage] = useState(null)\r\n    const [postDeleted, setPostDeleted] = useState(false)\r\n    const [deleteLoading, setDeleteLoading] = useState(false);\r\n    const [deletedPostId, setDeletedPostId] = useState(null);\r\n\r\n    async function deletePostMethod(_id, fileName){\r\n        setPostDeleted(false)\r\n        setDeleteErrorMessage(null)\r\n        setDeleteLoading(true)\r\n        try{      \r\n            const DELETEMUTATION = `mutation{\r\n                deletePost(_id: \"${_id}\", fileName: \"${fileName}\")\r\n            }`  \r\n\r\n            const deleteRequest = await fetch(SERVERURI, {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"authorization\": `Bearer ${token}`,\r\n                    \"content-type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify({query: DELETEMUTATION})\r\n            })\r\n\r\n\r\n            if(!deleteRequest.ok){\r\n                throw new Error(\"to catch block\")\r\n            }\r\n\r\n            const {data} = await deleteRequest.json();\r\n            if(!data && !data.deletePost){\r\n                throw new Error(\"to catch block\")\r\n            }\r\n            // successfully deleted\r\n            setDeletedPostId(_id)\r\n            setPostDeleted(true)\r\n            setDeleteLoading(false)\r\n        }catch(error){\r\n            setDeleteErrorMessage(\"Something went wrong, Try again Later!\")\r\n            // upon some error\r\n            setDeletedPostId(null)\r\n            setPostDeleted(false)\r\n            setDeleteLoading(false);\r\n        }\r\n    }\r\n\r\n    return {deletePostMethod, postDeleted, deleteErrorMessage, deleteLoading,deletedPostId }\r\n}\r\n\r\nexport const useUpdatePost = () => {\r\n    const {state:{token}, updatingDescriptionHandler} = useContext(AppContext)\r\n    const [updateErrorMessage, setUpdateErrorMessage] = useState(null)\r\n    const [postUpdated, setPostUpdated] = useState(false)\r\n    const [updateLoading, setUpdateLoading] = useState(false);\r\n\r\n\r\n    async function updatePostMethod(_id,currentDescription){\r\n        console.log(\"currentDescription\", currentDescription)\r\n        setUpdateErrorMessage(null)\r\n        setPostUpdated(false)\r\n        // smae value return \r\n        setUpdateErrorMessage(null)\r\n        // setting loading to true\r\n        setUpdateLoading(true)\r\n        // checking the previous and the current values--> no need to change if they are equal\r\n        // if(prevDescription.trim() === currentDescription.trim()){\r\n        //     setPostUpdated(true)\r\n        //     setUpdateLoading(false)\r\n        //     setPostUpdated(true)\r\n        //     return\r\n        // }\r\n        try{            \r\n            // checking for the fields\r\n            let characterCount = 0;\r\n            if(currentDescription.toString().trim().length === 0){\r\n                throw({errorMessage: \"description cannot be empty\"})\r\n            }\r\n\r\n\r\n            // not empty\r\n            currentDescription.toString().trim().split(\" \").forEach((word) => {\r\n                const wordLength = word.length\r\n                characterCount+=wordLength\r\n            })\r\n            if(characterCount > 300){\r\n                throw({errorMessage: \"Max limit is 300 characters\"})\r\n            }\r\n            if(characterCount < 50){\r\n                 throw({errorMessage: \"Min limit is 50 characters\"})\r\n            }\r\n\r\n            let match = /\\r|\\n/.exec(currentDescription);\r\n            if (match) {\r\n                throw({errorMessage: \"No line breaks allowed\"})\r\n            }\r\n            const UPDATEMUTATION = `mutation{\r\n                updatePost(_id: \"${_id}\", description: \"${currentDescription.trim()}\")\r\n            }`  \r\n            const updateRequest = await fetch(SERVERURI, {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"authorization\": `Bearer ${token}`,\r\n                    \"content-type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify({query: UPDATEMUTATION})\r\n            })\r\n\r\n\r\n            if(!updateRequest.ok){\r\n                throw new Error(\"to catch block\")\r\n            }\r\n\r\n            const {data} = await updateRequest.json();\r\n            if(!data && !data.updatePost){\r\n                throw new Error(\"to catch block\")\r\n            }\r\n            // successfully deleted\r\n            setPostUpdated(true)\r\n            setUpdateLoading(false)\r\n            updatingDescriptionHandler(_id,currentDescription)\r\n        }catch(error){\r\n            if(error.errorMessage){\r\n                setUpdateErrorMessage(error.errorMessage)\r\n            }\r\n            else{\r\n                setUpdateErrorMessage(\"Something went wrong, Try again Later!\")\r\n            }\r\n            // upon some error\r\n            setPostUpdated(false)\r\n            setUpdateLoading(false)\r\n        }\r\n    }\r\n    return {updateErrorMessage, updatePostMethod, postUpdated, updateLoading}\r\n}","import React, {useContext, useState, useEffect} from \"react\";\r\nimport ImageUploader from 'react-images-upload';\r\n// appContext\r\nimport {AppContext} from \"../App\"\r\nimport {usePostForm} from \"../utils/hooks\";\r\nimport {LoadingLineComponent} from \"../utils/globals\";\r\n\r\nimport AnimateHeight from 'react-animate-height';\r\n\r\n\r\n// icons\r\nimport {MdFilterList, MdError} from \"react-icons/md\"\r\nimport { PossibleFragmentSpreadsRule } from \"graphql\";\r\nexport default function TopRow(){\r\n    const [loading, setLoading] = useState(true)\r\n    const { state:{userID},\r\n            state:{loggedIn},\r\n            state:{totalposts},\r\n            state:{initialLoading},\r\n            LoadPostsData,\r\n            initialLoadingHandler,\r\n            radioAllHandler\r\n        } =  useContext(AppContext)\r\n    const [postForm, setPostForm] = useState(false);\r\n    const [showToolTip, setShowToolTip] = useState(false);\r\n    const [radioAll, setRadioAll] = useState(true)\r\n    \r\n    useEffect(() => {\r\n        if(initialLoading){\r\n            setTimeout(() => {\r\n                initialLoadingHandler(false)\r\n                setLoading(false)\r\n            }, 3000)\r\n            return \r\n        }\r\n        setTimeout(() => {\r\n            setLoading(false)\r\n        }, 500)\r\n    }, [])\r\n\r\n    function postFormHandler(e, value){\r\n        if(!loggedIn){\r\n            setShowToolTip(true)\r\n            setTimeout(() => {\r\n                setShowToolTip(false)\r\n            }, 2000)\r\n            return\r\n        }\r\n        if(e){\r\n            e.preventDefault();\r\n        }\r\n        setPostForm(value)\r\n    }\r\n    function radioHandler(e){\r\n        e.preventDefault();\r\n        if(!loggedIn){\r\n            postFormHandler()\r\n            return \r\n        }\r\n        if(e.target.value === \"ALL\" && radioAll){\r\n            return\r\n        }\r\n        if(e.target.value === \"ME\" && !radioAll){\r\n            return\r\n        }\r\n        setRadioAll(!radioAll)\r\n\r\n        if(e.target.value === \"ME\"){\r\n            radioAllHandler(false)\r\n            LoadPostsData(userID)\r\n        }\r\n        else {\r\n            radioAllHandler(true)\r\n            LoadPostsData(null)\r\n        }\r\n        // calling posts function at main app based on user Selection\r\n    }\r\n\r\n    if(loading){\r\n        return(\r\n            <div className = \"Loader_TopRow\">\r\n                <div className = \"LT_First\">\r\n                    <div>\r\n                    </div>\r\n                    <div className = \"LTF_Second\">\r\n                    </div>\r\n                </div>\r\n                <div className = \"LT_Second\">\r\n                    <div className = \"LTS_PostFirst\"></div>\r\n                    <div className = \"LTS_PostSecond LTS_PostCommon\"></div>\r\n                    <div className = \"LTS_PostThird LTS_PostCommon\"></div>\r\n                </div>\r\n                 <div className = \"LT_Third\"></div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n    return (\r\n            <div className =\"TopRow\">\r\n            <div className = \"TopRow_first\">\r\n                <div className = \"T_first_div\">\r\n                    <MdError />\r\n                </div>\r\n                {!loggedIn && <p>Login to add and edit cards</p>}\r\n                {loggedIn && <p>You can now edit and delete your cards</p>}\r\n            </div>\r\n            <div className = \"TopRow_second\">\r\n                <p>Total Posts: <span>({totalposts})</span></p>\r\n                <div className = \"T_RadioFilterDiv\">\r\n                    <input  type= \"radio\"\r\n                            name = \"filterRadio\"\r\n                            id=\"T_RF\"\r\n                            value = \"ME\"\r\n                            checked = {radioAll ? false : true}\r\n                            onChange = {e => radioHandler(e)}\r\n                    />\r\n                    <label htmlFor = \"T_RF\" > Mine Posts</label>\r\n                    <input  type= \"radio\"\r\n                            name = \"filterRadio\"\r\n                            id=\"T_RS\"\r\n                            value = \"ALL\"\r\n                            checked = {radioAll}\r\n                            onChange = {e => radioHandler(e)}\r\n                    /> \r\n                    <label htmlFor = \"T_RS\" > All Posts</label>\r\n                </div>\r\n            </div>\r\n\r\n            {\r\n                <div className = \"T_CPBDIV\">\r\n                    {showToolTip &&\r\n                        <p className = \"btnToolTip toolTipOpactiy\">\r\n                            Login to add/filter card\r\n                        </p>\r\n                    }\r\n                    <button onClick = {(e) =>postFormHandler(e,true)}>Create New Card</button>\r\n                </div>\r\n            }\r\n\r\n            {/* POST FORM */}\r\n            {\r\n                postForm && \r\n                <PostForm\r\n                    postFormHandler = {postFormHandler}\r\n                />\r\n            \r\n            }\r\n        </div>\r\n    )\r\n} \r\n\r\n\r\n//---------------------------------------------//\r\nconst postFormInitialValues = {\r\n    title: \"\", \r\n    description: \"\",\r\n    file: null,\r\n    titlePlaceholder: \"Title of the post\",\r\n    descriptionPlaceholder: \"Write something you want me to read, here! :)\"\r\n}\r\nfunction PostForm({postFormHandler}){\r\n    const {\r\n        loadPostCounts,\r\n        radioAll\r\n} =  useContext(AppContext)\r\n    const [inProp, setInProp] = useState(true);\r\n    const {addPostHandler} = useContext(AppContext)\r\n    const formRef = React.useRef(null)\r\n    const {\r\n        values, \r\n        changeHandler, \r\n        submitHandler, \r\n        loading,\r\n        errors,\r\n        postData\r\n    } = usePostForm(postFormInitialValues)\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"click\", outsideClickHandler)\r\n        return () => {\r\n            window.removeEventListener(\"click\", outsideClickHandler)\r\n        }\r\n    }, []);\r\n    function outsideClickHandler(e){\r\n        if(formRef.current && !formRef.current.contains(e.target)){\r\n            postFormHandler(null, false)\r\n        }\r\n    }\r\n    if(postData){\r\n        // closing the component\r\n        postFormHandler(null, false)\r\n        // updating postData\r\n        addPostHandler(postData);\r\n        loadPostCounts(radioAll);\r\n        return null\r\n    }\r\n    return(\r\n        <div className = \"PostFormContainer PostFormHeight\">  \r\n                {loading && <LoadingLineComponent/>}\r\n                    <form ref = {formRef}>\r\n                    <input\r\n                        onChange = {changeHandler}\r\n                        name = \"title\"\r\n                        type = \"text\"\r\n                        value = {values.title}\r\n                        placeholder = {values.titlePlaceholder}\r\n                    />  \r\n                    {errors && errors.titleError && <p>{errors.titleError}</p>}\r\n                    <textarea \r\n                        onChange = {changeHandler}\r\n                        value = {values.description}\r\n                        placeholder = {values.descriptionPlaceholder} \r\n                        name = \"description\">\r\n                    </textarea>\r\n                    {errors && errors.descriptionError && <p>{errors.descriptionError}</p>}\r\n                    <input \r\n                        onChange = {changeHandler}\r\n                        className = \"fileInput\" \r\n                        type = \"file\" \r\n                        name = \"file\"\r\n                    />\r\n                    {errors && errors.fileError && <p>{errors.fileError}</p>}\r\n                    {errors && errors.errorMessage && <p>{errors.errorMessage}</p>}\r\n                    <div className = \"PF_buttonCon\">\r\n                        <button onClick = {(e) => {e.preventDefault();submitHandler(values)}}>submit</button>\r\n                        <button className = \"closeLineBtn\" onClick = {(e) => {\r\n                            e.preventDefault()\r\n                            postFormHandler(null, false)\r\n                        }}>close</button>\r\n                    </div>\r\n                </form>\r\n        </div>\r\n    )\r\n}","import React, {useContext, useState, useEffect, useMemo} from \"react\";\r\nimport {AppContext} from \"../App\";\r\nimport {useDeletePost, useUpdatePost} from \"../utils/hooks\"\r\nimport { MdPermMedia } from \"react-icons/md\";\r\nimport {LoadingLineComponent} from \"../utils/globals\"\r\n\r\n\r\nexport default function PostCard(){\r\n    const [loading, setLoading] = useState(true)\r\n    const [twoRow, setTwoRow] = useState(false);\r\n    const   {\r\n                state:{postsData:postsData},\r\n                state:{initialLoading},\r\n                state:{postsLoading},\r\n                state:{radioAll},\r\n                deletePostHandler,\r\n                loadPostCounts\r\n            } = useContext(AppContext)\r\n    const dummyArray = [1,2,3,4,5,6,7,8]\r\n    useEffect(() => {\r\n         // adding eventListener to detectScreenWIdth\r\n        window.addEventListener(\"resize\", checkScreenWidth);\r\n        // running for the first time\r\n        checkScreenWidth()\r\n        setTimeout(() => {\r\n            setLoading(false)\r\n        }, 1000)\r\n\r\n        return (() => {\r\n            window.removeEventListener(\"resize\", checkScreenWidth)\r\n        })\r\n    }, [])\r\n\r\n    function checkScreenWidth(){\r\n        const width = window.innerWidth;\r\n        if(width > 768) setTwoRow(true)\r\n        else setTwoRow(false)\r\n    }\r\n\r\n    \r\n    if(initialLoading || postsLoading || loading){\r\n        return (\r\n            <ul className = \"Loader_PostCard\">\r\n              {dummyArray.map((neglectNumber) => {\r\n                  return <LoaderList key = {neglectNumber}/>\r\n              })}\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    return(\r\n        <div className = \"PostCard\">\r\n            {!radioAll && postsData.length === 0 &&\r\n                <p className = \"message\">You have no cards, create one!</p>\r\n            }\r\n            {/* Normal for devices below 750px */}\r\n            {!twoRow && postsData &&\r\n                <ul className = \"PostCard_firstColumn\">\r\n                    {\r\n                        postsData.map((post) => {\r\n                            return <PostList key = {post._id} post = {post} deletePostHandler = {deletePostHandler} radioAll = {radioAll} loadPostCounts ={loadPostCounts}/>\r\n                        })  \r\n                    }\r\n                </ul>\r\n            }\r\n\r\n            {/* Normal for devices above 750px */}\r\n\r\n            {twoRow && postsData &&\r\n                <ul className = \"PostCard_firstColumn\">\r\n                    {\r\n                        postsData.map((post, index) => {\r\n                            if((index+1)%2 !== 0){\r\n                                    return <PostList key = {post._id} post = {post} deletePostHandler = {deletePostHandler} radioAll = {radioAll} loadPostCounts ={loadPostCounts}/>\r\n                                }\r\n                            else return null\r\n                        })  \r\n                    }\r\n                </ul>\r\n            }\r\n\r\n            {twoRow && postsData &&\r\n                <ul className = \"PostCard_secondColumn\">\r\n                    {\r\n                        postsData.map((post, index) => {\r\n                            if((index+1)%2 === 0){\r\n                                    return <PostList key = {post._id} post = {post} deletePostHandler = {deletePostHandler} radioAll = {radioAll} loadPostCounts ={loadPostCounts}/>\r\n                                }\r\n                            else return null\r\n                        })  \r\n                    }\r\n                </ul>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nfunction PostList({post, deletePostHandler, radioAll, loadPostCounts}){\r\n    const  {imageURL,title, description, createdBy, _id} = post;\r\n    const {deleteErrorMessage, deletePostMethod, postDeleted, deleteLoading, deletedPostId} = useDeletePost()\r\n    const {updateErrorMessage, updatePostMethod, postUpdated, updateLoading} = useUpdatePost()\r\n    const [showUpdateFields, setShowUpdateFields] = useState(false);\r\n\r\n    // updateValues\r\n    const [valuesToUpdate, setValuesToUpdate] = useState({})\r\n\r\n    useEffect(() => {\r\n        const Obj = {\r\n            updateTitle: title,\r\n            updateDescription: description\r\n        }\r\n        setValuesToUpdate(Obj)\r\n    }, [])\r\n    \r\n    function updateClickHandler(action){\r\n        if(action === \"EDIT\") setShowUpdateFields(true)\r\n        else if(action === \"UPDATE\") {\r\n            setShowUpdateFields(false);\r\n            updatePostMethod(_id,valuesToUpdate.updateDescription)\r\n        }\r\n    }\r\n\r\n    function updateChangeHandler(e){\r\n        e.preventDefault();\r\n        const {name, value} = e.target;\r\n        const newObj = {\r\n            ...valuesToUpdate, \r\n            [name]:value\r\n        }\r\n        setValuesToUpdate(newObj)\r\n    }\r\n\r\n    if(postDeleted){\r\n        deletePostHandler(null,deletedPostId)\r\n        loadPostCounts(radioAll)\r\n    }\r\n\r\n    return(\r\n        <li className = \"PostCard_PostList\">\r\n           \r\n            {(updateLoading || deleteLoading) &&  <LoadingLineComponent/>}\r\n            {\r\n                <>\r\n                    <Picture imageURL = {imageURL}/>\r\n                    <Description \r\n                        description = {description} \r\n                        createdBy = {createdBy} \r\n                        title ={title}\r\n                        showUpdateFields = {showUpdateFields}\r\n                        valuesToUpdate = {valuesToUpdate}\r\n                        updateChangeHandler = {updateChangeHandler}\r\n                        postUpdated = {postUpdated}\r\n                        deleteErrorMessage = {deleteErrorMessage}\r\n                        updateErrorMessage = {updateErrorMessage}\r\n                        \r\n                       \r\n                    />\r\n                    <PostButtons \r\n                        _id = {_id}\r\n                        imageURL = {imageURL}\r\n                        createdBy = {createdBy} \r\n                        // listInitialLoadingHandler = {listInitialLoadingHandler} \r\n                        deletePostMethod = {deletePostMethod}\r\n                        updatePostMethod = {updatePostMethod}\r\n                        updateClickHandler = {updateClickHandler}\r\n                        showUpdateFields= {showUpdateFields}\r\n                        />\r\n                </>\r\n            }\r\n        </li>\r\n    )\r\n}\r\n\r\n\r\nfunction Description({\r\n    deleteErrorMessage,\r\n    updateErrorMessage,\r\n    postUpdated,\r\n    updateChangeHandler,\r\n    valuesToUpdate,\r\n    showUpdateFields,\r\n    description, \r\n    createdBy, \r\n    title}) {\r\n    const {state:{userID:userID}, state:{loggedIn:loggedIn}} = useContext(AppContext)\r\n\r\n    return (\r\n        <div className = \"Description\">\r\n            <h1>{title && title.replace(title.charAt(0), title.charAt(0).toUpperCase())}</h1>\r\n            <h3>Post By : \r\n                {   \r\n                    !loggedIn ? \" \" + createdBy.name.replace(createdBy.name.charAt(0), createdBy.name.charAt(0).toUpperCase()):\r\n                    userID && userID.toString() === createdBy._id.toString() ? \" You\": \" \" + createdBy.name.replace(createdBy.name.charAt(0), createdBy.name.charAt(0).toUpperCase())\r\n                } \r\n            </h3>\r\n            {updateErrorMessage && <p className = \"errorMessage\">{updateErrorMessage}</p>}\r\n            {deleteErrorMessage && <p className = \"errorMessage\">{deleteErrorMessage}</p>}\r\n            {showUpdateFields ? \r\n                <textarea \r\n                    name = \"updateDescription\"\r\n                    onChange = {e => {updateChangeHandler(e)}}\r\n                    value = {valuesToUpdate.updateDescription}\r\n                ></textarea>\r\n                : \r\n                <p> \r\n                    {description && description.replace(description.charAt(0),description.charAt(0).toUpperCase())} \r\n                </p>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nfunction Picture({imageURL}){\r\n    const [imageLoaded, setImageLoaded] = useState(false);\r\n    return (\r\n        <div className = \"Picture\">\r\n            {\r\n                !imageLoaded && \r\n                <div className = \"lazyLoading\">\r\n                    <MdPermMedia/>\r\n                </div>\r\n            }\r\n            <img \r\n                style = {imageLoaded ? {} : {display: \"none\"}}\r\n                src = {imageURL}\r\n                onLoad = {e =>setImageLoaded(true)}\r\n            />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nfunction PostButtons({showUpdateFields,updateClickHandler, _id, imageURL,createdBy, deletePostMethod}){\r\n    // console.log(\"imageUrl\", imageURL)\r\n    const {state:{userID:userID}, state:{loggedIn:loggedIn}} = useContext(AppContext)\r\n    // console.log(\"userID\", userID)\r\n    // console.log(\"createdByID\",createdBy._id)\r\n    if(!loggedIn || (userID && createdBy._id.toString() !== userID.toString())){\r\n        return null\r\n    }\r\n    return (\r\n        <div className = \"PostButtons\">\r\n            {\r\n                showUpdateFields ? \r\n                <button\r\n                    className = \"PostButtons_button\"\r\n                    onClick = {e => updateClickHandler(\"UPDATE\")}\r\n                >\r\n                    Update\r\n                </button> \r\n                :\r\n                <button\r\n                    className = \"PostButtons_button\"\r\n                    onClick = {e => updateClickHandler(\"EDIT\")}\r\n                >\r\n                    Edit\r\n                </button> \r\n            }\r\n\r\n            <button \r\n                className = \"PostButtons_button deleteBtn\"\r\n                onClick = {(e) => deletePostMethod(_id, imageURL)}\r\n                >\r\n                Delete\r\n            </button>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n/*-------------*/\r\nfunction LoaderList(){\r\n    return (\r\n        <li>\r\n            <div>\r\n                <MdPermMedia/>\r\n            </div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div>\r\n                <div></div>\r\n                <div></div>\r\n            </div>\r\n        </li>\r\n    )\r\n}","import React, {useContext, useState} from \"react\";\r\n\r\n\r\n\r\nimport {AppContext} from \"../App\";\r\nimport {useLogin, useRegister} from \"../utils/hooks\";\r\nimport {LoadingLineComponent} from \"../utils/globals\";\r\n\r\n\r\nconst initialLoginValues = {\r\n    email: \"\",\r\n    password:\"\",\r\n    emailPlaceholder: \"youremail@gmail.com\",\r\n    passwordPlaceholder: \"**********\"\r\n}\r\n\r\nconst initialRegisterValues = {\r\n    email: \"\",\r\n    password:\"\",\r\n    username: \"\",\r\n    usernamePlaceholder: \"Username\",\r\n    emailPlaceholder: \"youremail@gmail.com\",\r\n    passwordPlaceholder: \"**********\"\r\n}\r\n\r\nexport default function Account(){\r\n    const {state:{loggedIn}, logoutHandler} = useContext(AppContext)\r\n    const [register, setRegister] = useState(false);\r\n\r\n    if(loggedIn){\r\n        return(\r\n            <div className = \"alreadyIn\">\r\n                <p>You are already loggedIn!!</p>\r\n                <button className = \"logoutButton\"\r\n                        onClick = {(e) => {\r\n                            e.preventDefault();\r\n                            logoutHandler()\r\n                        }}\r\n                >Logout</button>\r\n            </div>\r\n        )   \r\n    }\r\n    return (\r\n        <div className = \"Form\">\r\n            {\r\n                !register \r\n                && \r\n                <LoginForm\r\n                    setRegister = {setRegister}\r\n                />\r\n            }\r\n            {\r\n                register \r\n                && \r\n                <RegisterForm\r\n                    setRegister={setRegister}\r\n                />\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction LoginForm({setRegister}){\r\n    const {loginHandler} = useContext(AppContext)\r\n    const {values, changeHandler, submitHandler, errors, loggedIn, token, loading} = useLogin(initialLoginValues)\r\n    if(loggedIn){\r\n        setTimeout(() => {\r\n            loginHandler(true,token)\r\n        },300)\r\n    }\r\n    if(loading){\r\n        return <LoadingLineComponent/>\r\n    }\r\n    return (\r\n     <form className = \"LoginForm\" onSubmit = {(e) => {\r\n            e.preventDefault();\r\n            setRegister(true)\r\n        }}>\r\n            {\r\n                errors && errors.errorMessage &&\r\n                <p className = \"errorMessageP\">{errors.errorMessage}</p>\r\n            }\r\n            <input\r\n                onChange = {(e) => changeHandler(e)}\r\n                type = \"email\"\r\n                name = \"email\"\r\n                placeholder = {values && values.emailPlaceholder}\r\n                values = {values.email}\r\n            />\r\n            <input\r\n                onChange = {(e) => changeHandler(e)}\r\n                type = \"password\"\r\n                name = \"password\"\r\n                placeholder = {values && values.passwordPlaceholder}\r\n                values = {values.password}\r\n            />\r\n            <div>\r\n                <button \r\n                    className = \"Login_button\"\r\n                    onClick = {(e) => {submitHandler(e,values)}}\r\n                >\r\n                        Login</button>\r\n                <button \r\n                    className = \"Register_link\" \r\n                    type = \"submit\"\r\n                \r\n                >Signup</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nfunction RegisterForm({setRegister}){\r\n    const {values, changeHandler, errors, registerHandler, registered, loading} = useRegister(initialRegisterValues)\r\n    if(registered){\r\n        setRegister(false)\r\n    }\r\n    if(loading){\r\n        return <LoadingLineComponent/>\r\n    }\r\n    return (\r\n        <form className = \"RegisterForm\" onSubmit= {(e) => {\r\n            e.preventDefault();\r\n            setRegister(false)\r\n        }}>\r\n\r\n            {\r\n                errors && errors.errorMessage &&\r\n                <p className = \"errorMessageP\">{errors.errorMessage}</p>\r\n            }\r\n            <input\r\n                onChange = {(e) => changeHandler(e)}\r\n                type = \"string\"\r\n                name = \"username\"\r\n                value = {values.username}\r\n                placeholder = {values.usernamePlaceholder}\r\n            />\r\n            <input\r\n                onChange = {(e) => changeHandler(e)}\r\n                name = \"email\"\r\n                type = \"email\"\r\n                value = {values.email}\r\n                placeholder = {values.emailPlaceholder}\r\n            />\r\n            <input\r\n                onChange = {(e) => changeHandler(e)}\r\n                name = \"password\"\r\n                type = \"password\"\r\n                value = {values.password}\r\n                placeholder = {values.passwordPlaceholder}           \r\n            />\r\n            <div>\r\n                <button \r\n                    className = \"Register_button\"\r\n                    onClick = {(e) => registerHandler(e, values)}\r\n                    > SignUp\r\n                </button>\r\n                <button \r\n                 className = \"Login_link\"\r\n                 type = \"submit\"\r\n                >\r\n                    Login\r\n                </button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n","import React, {useState, useEffect} from \"react\";\r\n\r\nimport {MdNavigateNext} from \"react-icons/md\"\r\nexport default function GraphiqlButton({graphiqlLink}){\r\n    const [loading, setLoading] = useState(true);\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setLoading(false)\r\n        }, 1500)\r\n    }, [])\r\n\r\n    if(loading){\r\n        return  <div className= \"graphiqlButton\">\r\n                    <div className = \"GraphQLBtnLoader\">\r\n                    </div>\r\n                </div>\r\n    }\r\n    return(\r\n        <div className= \"graphiqlButton\">\r\n            <button onClick = {\r\n                (e) => {\r\n                    e.preventDefault();\r\n                    window.open(graphiqlLink, \"_blank\")\r\n                }\r\n            }>\r\n                <span>Graphiql Playground</span><MdNavigateNext/>\r\n            </button>\r\n        </div>\r\n    )\r\n}","import decode from \"jwt-decode\"\r\n\r\nexport const checkUserStatus = async () => {\r\n    try{\r\n        const accessToken = getCookie(\"accessToken\");\r\n        const refreshToken = getCookie(\"refreshToken\");\r\n        if(!accessToken || !refreshToken){\r\n            throw new Error(\"no access\")\r\n        }\r\n        const {userID,userType, tokenType, exp} = decode(accessToken)\r\n        if(!exp){\r\n            throw new Error(\"no access\")\r\n        }\r\n        const expiredToken = expired(exp);\r\n        if(!expiredToken){\r\n           return {token: accessToken, loggedIn: true, userID: userID}\r\n        }\r\n\r\n        // RefreshToken\r\n        if(expiredToken){\r\n            const {userID,userType, tokenType, exp} = decode(refreshToken)\r\n            if(!exp){\r\n                throw new Error(\"no access\")\r\n            }\r\n            const expiredToken = expired(exp);\r\n            if(!expiredToken){\r\n               return {token: refreshToken, loggedIn: true, userID: userID}\r\n            }\r\n            throw new Error(\"no access\")\r\n        }\r\n\r\n    }catch(error){\r\n        const accessToken = getCookie(\"accessToken\");\r\n        const refreshToken = getCookie(\"refreshToken\");\r\n        delete_cookie(accessToken)\r\n        delete_cookie(refreshToken)\r\n        return {token: null, loggedIn: false, userID: null}\r\n    }\r\n}\r\n\r\n\r\nfunction getCookie(cname) {\r\n    var name = cname + \"=\";\r\n    var decodedCookie = decodeURIComponent(document.cookie);\r\n    var ca = decodedCookie.split(';');\r\n    for(var i = 0; i <ca.length; i++) {\r\n      var c = ca[i];\r\n      while (c.charAt(0) === ' ') {\r\n        c = c.substring(1);\r\n      }\r\n      if (c.indexOf(name) === 0) {\r\n        return c.substring(name.length, c.length);\r\n      }\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction expired(exp){\r\n    const date = new Date();\r\n    if(date.getTime() > exp * 1000){\r\n        return true\r\n    }\r\n    return false\r\n}\r\n\r\nfunction delete_cookie( name ) {\r\n    //document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT;';\r\n    document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;\r\n  }","import React, {useState,useEffect,useReducer, createContext, useMemo} from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\n\n// components\nimport Navbar from \"./components/Navbar\";\nimport Information from \"./components/Information\";\nimport Toggle from \"./components/Toggle\";\nimport TopRow from \"./components/TopRow\";\nimport PostCard from \"./components/PostCard\";\nimport Account from \"./components/Account\";\nimport GraphiqlButton from \"./components/GraphiqlButton\"\nimport {checkUserStatus} from \"./utils/authCheck\";\nimport {SERVERURI} from \"./utils/globals\"\nimport \"./scss/app.scss\";\n\n\n// CONTEXTS\nexport const AppContext = createContext();\n\nfunction appReducer(state, action){\n  switch(action.type){\n    case \"toggleToAccount\":\n      return {...state, toggleToAccount: action.payload}\n    case \"loggedIn\":\n      return {...state, loggedIn: action.payload}\n    case \"userID\":\n      return {...state, userID: action.payload}\n    case \"token\":\n      return {...state, token: action.payload}\n    case \"postsData\":\n      return {...state, postsData: action.payload}\n    case \"totalposts\":\n      return {...state, totalposts: action.payload}\n    case \"deletePosts\":\n      return {...state}\n    case \"addPost\":\n      // place based on ascending or descending order\n      // for now ascending order\n      return {...state, postsData:action.payload }\n    case \"postsLoading\":\n      return {...state, postsLoading:action.payload}\n    case \"initialLoading\":\n      return {...state, initialLoading:action.payload}\n    case \"radioAll\":\n      return {...state, radioAll:action.payload}\n    default: \n      return state\n  }\n}\n\nconst initialValues = {\n  toggleToAccount: false,\n  loggedIn: false,\n  userID: null, \n  token: null,\n  totalposts: null,\n  postsData: null,\n  postsLoading: false,\n  initialLoading: true,\n  radioAll: true,\n  graphiqlLink: \"/graphql\"\n}\n\nfunction App() {\n  const [state, dispatch] = useReducer(appReducer, initialValues)\n  const [loading, setLoading] = useState(true);\n  const [firstLoaded, setFirstLoaded] = useState(false);\n  const [errors, setErrors] = useState(null);\n  const [toggleAuth, setToggleAuth] = useState(false)\n\n\n  useEffect(() => {\n      /*----AUTH_STATUS------*/\n      /* I have not impleneted Route here[No routes/ protected Routes] for this little project--so this function is called every 10seconds to check auth status*/\n      //-->Additionally NO Optimization with useCallback and useMemo\n      // for the second, this value is true\n      let timerID;\n      if(firstLoaded){\n        timerID = setInterval(() => {\n          loadAuthStatus();\n        }, 3000);\n        setTimeout(() => {\n          removeTimer(timerID)\n          setToggleAuth(!toggleAuth)\n        }, 5000)\n      }\n\n      // it runs anyway\n      if(!firstLoaded){\n        loadAuthStatus();\n        LoadPostsData(null)\n        setFirstLoaded(true);\n        setTimeout(() => {\n          setToggleAuth(!toggleAuth)\n        }, 3000)\n      }\n\n      return (() => {\n        window.clearInterval(timerID)\n      })\n  },[toggleAuth])\n\n\nfunction removeTimer(id){\n  window.clearInterval(id)\n}\n/*----------------AUTHSTATUS-----------------*/\n  async function loadAuthStatus(){\n    try{\n      const {token, loggedIn, userID} = await checkUserStatus();\n      if(loggedIn){\n        dispatch({type: \"loggedIn\", payload: loggedIn})\n        dispatch({type: \"token\", payload: token})\n        dispatch({type: \"userID\", payload: userID})\n      }\n      else {\n        dispatch({type: \"token\", payload: null})\n        dispatch({type: \"loggedIn\", payload: false})\n        dispatch({type: \"userID\", payload: null})\n      }\n    }catch(error){\n      // errors for you :))))\n    }\n}\n\n\n/*----------------LoadPostsData-----------------*/\n  async function LoadPostsData(userIDParam){\n      // setPostsLoadin\n      dispatch({type: \"postsLoading\", payload: true})\n      const parameters = {\n        limit: 100,\n        skip: 0,\n        asc: -1,\n        userID: null\n      }\n      if(userIDParam){\n        parameters.userID = userIDParam\n      }\n    try{\n      const {limit, skip, asc, userID} = parameters;\n      const POSTS_QUERY = `query {\n          posts(limit:${limit}, skip: ${skip}, asc: ${asc}, userID: \"${userID}\"){\n                __typename\n                ... on Error{\n                  errorMessage\n                }\n                ... on Post{\n                  _id\n                  title\n                  description\n                  createdAt\n                  updatedAt\n                  imageURL\n                  createdBy{\n                    _id\n                    name\n                  }\n                }\n          }\n      }\n        `\n\n      const COUNT_QUERY = `query {\n            totalPosts(userID: \"${userID}\"){\n            __typename\n            ... on TotalPost{\n              count\n            }\n         }\n       }\n       `\n\n      const getPosts = () => fetch(SERVERURI, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body:JSON.stringify({\n          query: POSTS_QUERY, \n          variables: {}\n          })\n      })\n      const getCounts = () => fetch(SERVERURI, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body:JSON.stringify({\n          query: COUNT_QUERY\n          })\n      })\n      const [getPostsResponse, getCountsResponse] = await Promise.all([getPosts(), getCounts()])\n      if(!getPostsResponse.ok || !getCountsResponse.ok){\n        throw new Error(\"oops\")\n      }\n\n      // avoiding same name desctructuring\n      const [getPostsResponseData, getCountsResponseData] = [await getPostsResponse.json(), await getCountsResponse.json()]\n      if(!getPostsResponseData.data.posts || !getCountsResponseData.data.totalPosts ){\n        throw new Error(\"oops, handled by cath//\")\n      }\n\n\n      const {posts} = getPostsResponseData.data;\n      const {totalPosts:{count:count}} = getCountsResponseData.data;\n      // dispatching datas\n      dispatch({type: \"postsData\", payload: posts})\n      dispatch({type: \"totalposts\", payload: count})\n      setTimeout(() => {\n        dispatch({type: \"postsLoading\", payload: false})\n      }, 1000)\n\n    }\n    catch(error){\n      console.log(\"error\", error)\n      setErrors({oopsError: \"something definately went wrong okay :) \"})\n      setTimeout(() => {\n        dispatch({type: \"postsLoading\", payload: false})\n      }, 1000)\n    }\n  }\n\n\n  /* HANDLERS */\n  function accountToggleHandler(booleanValue){\n    dispatch({type: \"toggleToAccount\", payload: booleanValue})\n  }\n\n  function loginHandler(booleanValue, token){\n    dispatch({type:\"loggedIn\", payload: booleanValue})\n    // toggle account handler\n    accountToggleHandler(false)\n    baseTokenHandler(token)\n  }\n\n  function baseTokenHandler(value){\n    dispatch({type:\"token\", payload: value})\n  }\n\n\n  function deletePostHandler(e,_id){\n    // this is going to run upon success only\n    console.log(\"_id\", _id)\n    if(e){\n      e.preventDefault()\n    }\n\n    const posts = [...state.postsData]\n    const filteredPosts = posts.filter(post => post._id.toString() !== _id.toString())\n\n    dispatch({type: \"postsData\", payload: filteredPosts})\n    // total posts value changes too but through subscription\n  }\n\n\n  function addPostHandler(post){\n    const newPostsData = [post,...state.postsData]\n    dispatch({type:\"addPost\", payload:newPostsData})\n  }\n\n\n\n  function logoutHandler(){\n      //document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT;';\n      document.cookie = `refreshToken=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;\n      document.cookie = `accessToken=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;\n      dispatch({type:\"loggedIn\", payload: false})\n  }\n\n  function initialLoadingHandler(booleanValue){\n    dispatch({type:\"initialLoading\", action:booleanValue})\n  }\n\n  async function loadPostCounts(radioAllBooleanValue){\n    let userID;\n    if(radioAllBooleanValue){\n      userID = state.userID\n    }else {\n      userID = null\n    }\n    try{\n        const COUNT_QUERY = `query {\n          totalPosts(userID: \"${userID}\"){\n          __typename\n          ... on TotalPost{\n            count\n              }\n            }\n          }`\n\n        const getCounts = () => fetch(SERVERURI, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body:JSON.stringify({\n            query: COUNT_QUERY\n            })\n        })\n\n\n        const getCountsResponse= await getCounts()\n        if(!getCountsResponse.ok){\n          throw new Error(\"oops\")\n        }\n  \n        // avoiding same name desctructuring\n        const getCountsResponseData = await getCountsResponse.json();\n        if(!getCountsResponseData.data.totalPosts){\n          throw new Error(\"oops, handled by cath//\")\n        }\n\n        const {totalPosts:{count:count}} = getCountsResponseData.data;\n\n        // dispatching datas\n        dispatch({type: \"totalposts\", payload: count})\n    }\n    catch(error){\n      console.log(\"oops, couldnot get the count right now try later :)\")\n    }\n  }\n\n  function radioAllHandler(value){\n    dispatch({type:\"radioAll\", payload:value})\n  }\n\n  function updatingDescriptionHandler(_id,updatedDescription){\n    const postsDataCopy = [...state.postsData]\n    const postIndex = postsDataCopy.findIndex((item) => item._id.toString() === _id.toString())\n    postsDataCopy[postIndex].description = updatedDescription;\n    // updating the state with the latest data\n    dispatch({type: \"postsData\", payload: postsDataCopy})\n  }\n\n\n  return (\n    <div className=\"App\">\n      {/* Navbar */}\n      <Navbar />\n      <AppContext.Provider value = {\n          {\n            state, \n            loginHandler,\n            logoutHandler,\n            deletePostHandler,\n            addPostHandler,\n            LoadPostsData,\n            initialLoadingHandler,\n            loadPostCounts,\n            radioAllHandler,\n            updatingDescriptionHandler\n           }\n        } \n        >\n\n        \n        {/* GrpahiqlButton */}\n\n        <GraphiqlButton graphiqlLink = {state.graphiqlLink}/>\n        {/* Imformation */}\n        <Information />\n        {/* Toggle */}\n        <Toggle \n          accountToggleHandler = {accountToggleHandler}\n          toggleToAccount = {state.toggleToAccount}\n\n        />\n        {/* TopRow */}\n        {state && !state.toggleToAccount && <TopRow/>}\n        {/* PostCard */}\n        {state && !state.toggleToAccount && <PostCard/>}\n        {state && state.toggleToAccount && <Account/>}\n      </AppContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./App\"\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}